特殊符号
回显屏蔽 @
:: 我们一般用如下指令,作为批量处理文件的开头
@echo off


重定向 > , >> , <
> , >> 将输出信息重定向到指定的设备或文件,系统默认输出到显示器
:: > 如果file.txt存在,就清空输入,不存在就创建
echo abcd > file.txt
:: >> 如果file.txt存在,就追加输入,不存在就创建
echo abcd >> file.txt


< 将输入信息来源重定向为指定的设备或文件
set /p var= < file.txt
echo %var%


管道符号 |
command_1 | command_2

转义符 ^ , %
将特殊符号转化为一般符号,特殊符号指 : | & > <
:: 在屏幕输出 test > file.txt
echo test ^> file.txt

:: 在屏幕输出 100%
echo 100%%

逻辑命令符 & , && , ||
&
连接n个DOS命令,并把这些命令按顺序执行,而不管是否有命令执行失败

&&
当 && 前面的命令成功执行时,才执行 && 后面的命令,否则不执行

||
当 || 前面的命令失败时,执行 || 后面的命令,否则不执行


控制流
if 语句
更多操作说明可以 help if

if 格式
IF [NOT] ERRORLEVEL number command
IF [NOT] string1 compare-op string2 command
IF [NOT] EXIST filename command

if 说明
NOT:指定只有条件为 false 的情况下,Windows 才应该执行该命令.
ERRORLEVEL number:如果最后运行的程序返回一个等于或大于指定数字的退出代码,指定条件为 true.
string1 compare-op string2:如果指定的文字字符串匹配,指定条件为 true.
EXIST filename:如果指定的文件名存在,指定条件为 true.
command:如果符合条件,指定要执行的命令.如果指定的条件为 false,命令后可跟 ELSE 命令,该命令将在 ELSE 关键字之后执行该命令.


:: 书写格式
:: *********************
:: IF EXIST filename 如果filename文件存在,则执行()里面的语句,否则指向else ()里面语句
:: del filename 删除filename文件
:: echo filename. missing 打印filename. missing
:: *********************
IF EXIST filename. (
    del filename.
) ELSE (
    echo filename. missing.
)

:: ELSE 子句必须出现在同一行上的 IF 之后
:: 如果都放在同一行上
IF EXIST filename. (del filename.) ELSE echo filename. missing


for 语句
更多操作说明可以 help for

(1)for 格式
FOR %variable IN (set) DO command [command-parameters]
(2)for 说明
%variable:指定一个 单一字母 可替换的参数.
(set):指定一个或一组文件.可以使用通配符.
command:指定对每个文件执行的命令.
command-parameters:为特定命令指定参数或命令行开关


:: 书写格式
:: *********************
::格式: FOR %%variable IN (set) DO command
::说明:%%variable是批处理程序里面的书写格式,在DOS中书写为%variable
::无开关
:: *********************
for %%v in (a,"b c",d) do echo %%v

:: *********************
:: 格式:FOR /L %%variable IN (start,step,end) DO command
:: 说明:start为开始计数的初始值,step为每次递增的值,end为结束值.当end小于start时,step需要设置为负数
:: 开关/L
:: *********************
for /l %%v in (1,2,10) do echo %%v

:: *********************
:: 格式:FOR /F ["options"] %%variable IN (set) DO command
:: 说明:set为("string",'command',file-set)中的一个；
::      options是(eol=c,skip=n,delims=xxx,tokens=x,y,m-n,usebackq)中的一个或多个的组合
		eol=c           - 指一个行注释字符的结尾(就一个)
		skip=n          - 指在文件开始时忽略的行数.
        delims=xxx      - 指分隔符集.这个替换了空格和制表符的默认分隔符集.
        tokens=x,y,m-n  - 指每行的哪一个符号被传递到每个迭代的 for 本身.这会导致额外变量名称的分配.
        				  m-n格式为一个范围.通过 nth 符号指定 mth.
        				  如果符号字符串中的最后一个字符星号,
        				  那么额外的变量将在最后一个符号解析之后分配并接受行的保留文本.
        usebackq        - 指定新语法已在下类情况中使用:在作为命令执行一个后引号的字符串
        				  并且一个单引号字符为文字字符串命令并允许在 file-set中使用双引号扩起文件名称.
:: 开关/F
:: *********************
for /f "tokens=1-3 delims=," %%a in ("1,3,7") do echo a=%%a b=%%b c=%%c


goto
更多操作说明可以 help goto

(1)go to 格式
GOTO label

label 指定批处理程序中用作标签的文字字符串
:label
echo label
goto label1


字符串的操作
关于 %variable %%variable %variable% 的介绍
%variable,%%variable 是FOR循环时用的.
%variable 是在DOS中书写,%%variable 是批处理程序里面的书写格式
%variable% 是一个变量的意思


截取字符串
%variable:~start,size%

@echo off
set var=abcde 12 345

:: start 正数为从前开始截取,负数为从最后开始截取
:: size 不写则默认为截取到末尾

:: 从第1个字符开始,截取5个
rem 截取前5个字符
echo %var:~0,5%

rem 从3个字符开始截取到末尾
echo %var:~2%

rem 截取最后5个字符
echo %var:~-5%

pause > nul

替换字符串
%variable:OldCahr=NewChar%

@echo off
set var=abcde

:: 把 cd 替换成 fg   --> abfgd
echo %var:cd=fg%

:: 变量的值还是没有变,如果要改变则需要用set指令
set "var=%var:cd=fg%"

pause > nul


合并字符串
%variabl1%%variabl2%

@echo off
set var1=abc
set var2=def

:: 合并两字符串
echo %var1%%var2%

:: 合并替换
set "var1=%var1%%var2%"
pause > nul


扩展字符串
“扩充”这个词汇来自于微软自己的翻译,意思就是对表示文件路径的字符串进行特殊的处理
详细说明 for / ?
@echo off
echo 正在运行的这个批处理:
echo 完全路径:%0
echo 去掉引号:%~0
echo 所在分区:%~d0
echo 所处路径:%~p0
echo 文件名:%~n0
echo 扩展名:%~x0
echo 文件属性:%~a0
echo 修改时间:%~t0
echo 文件大小:%~z0
pause > nul


其中的%0是批处理里面的参数,代表当前运行的批处理的完全路径.
类似的还有%1-%9,分别代表传递来的第1-9个参数.

数值计算
更多详细使用 set /?

批量处理文件使用格式 :set /a expression ,expression代表计算表达式,计算表达式跟C语言里面的表达式基本上完全一致,但是没有自加,自减

@echo off
set /a var=1+2

echo %var%


批处理文件编写时是中文,cmd运算时是乱码
把.bat 或 .cmd 文件保存,编译转换为ANSI编码
