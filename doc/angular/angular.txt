var app = angular.module('myApp', []);

ng-app : 让 body 元素成为 AngularJS 应用的根元素
ng-controller : 为应用变量添加控制器
<body ng-app="myApp" ng-controller="myCtrl">
    ng-init : 初始化应用时创建一个变量
    <div ng-init="myText='Hello World!'">
        <p>display : {{myText}}</p>
    </div>

    <div ng-init="quantity=1;cost=5">
        <p>总价： <span ng-bind="quantity * cost"></span></p>
        <p>总价： {{ quantity * cost }}</p>
    </div>

    <div ng-init="person={firstName:'John',lastName:'Doe'}">
        <p>姓为 {{ person.lastName }}</p>
    </div>
    <div ng-init="points=[1,15,19,2,40]">
        <p>第三个值为 {{ points[2] }}</p>
    </div>
</body>


ng-model 指令把元素值（比如输入域的值）绑定到应用程序。
<div ng-app="" ng-init="quantity=1;price=5">
    <h2>价格计算器</h2>
    数量： <input type="number"    ng-model="quantity">
    价格： <input type="number" ng-model="price">
    <p>
        <b>总价：</b>
        {{ quantity * price }}
    </p>
</div>

ng-repeat 指令用在一个对象数组上：
<div ng-app="" ng-init="names=[
{name:'Jani',country:'Norway'},
{name:'Hege',country:'Sweden'},
{name:'Kai',country:'Denmark'}]">
    <p>循环对象：</p>
    <ul>
        <li ng-repeat="x in names">
            {{ x.name + ', ' + x.country }}
        </li>
    </ul>
</div>

创建自定义的指令
<script>
var app = angular.module("myApp", []);
app.directive("mymoduleDirective", function() {
    return {
        restrict : "A",
        template : "<h1>自定义指令!</h1>"
    };
});
</script>
元素名
<mymodule-directive></mymodule-directive>
属性
<div mymodule-directive></div>
类名
<div class="mymodule-directive"></div>
注解
<!-- directive: mymodule-directive -->
E 作为元素名使用
A 作为属性使用
C 作为类名使用
M 作为注释使用
restrict 默认值为 EA, 即可以通过元素名和属性名来调用指令。


ng-model 指令
双向绑定
<body>
<div ng-app="myApp" ng-controller="myCtrl">
    名字: <input ng-model="name">
    <h1>你输入了: {{name}}</h1>
</div>

<script type="text/javascript">
    var app = angular.module('myApp', []);
    app.controller('myCtrl', function ($scope) {
        $scope.name = "John Doe";
    });
</script>
<p>修改输入框的值，标题的名字也会相应修改。</p>
</body>

验证用户输入
<span ng-show="myForm.myAddress.$error.email">不是一个合法的邮箱地址</span>
ng-model常用指令
ng-empty
ng-not-empty
ng-touched
ng-untouched
ng-valid
ng-invalid
ng-dirty
ng-pending
ng-pristine


1.
$http的基本语法

$http({
    url: "/requestMapping", //请求的url路径
    method: 'POST',     //GET/DELETE/HEAD/JSONP/POST/PUT

    params: {'username': 'john', 'userid': 30, 'phone': '87548744'}, //转为  ?param1=xx1;param1=xx2的形式
    data: {'username': 'peter', 'userid': 10, 'phone': '27381123'}, //包含了将被当做消息体发送给服务器的数据,通常在POST请求时使用
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',//application/x-www-form-urlencoded,multipart/form-data,application/json,text/xml
        'Authentication': 'abc'
    }
}).then(
    function success(resq) {
        //响应成功的处理方法体
    }, function error(resq) {
        //响应错误的处理方法体
    });

resq包含5个参数
data:响应体, 就是后台响应后返回的数据。格式为字符串或对象
status:http返回的状态码, 如200, 表示服务器响应成功;
headers(函数)：头信息的getter函数, 可以接受一个参数, 用来获取对应名字的值
config(对象)：生成原始请求的完整设置对象
statusText:相应的http状态文本, 如
"ok"

2.
$http提供的一些快捷请求方式, 返回HttpPromise对象
$http.get(url, config)
$http.delete(url, config)
$http.head(url, config)
$http.jsonp(url, config)
$http.post(url, data, config)
$http.put(url, data, config)

3.
$http.get和$http.post的用法说明
$http.get(url, [config]).success(function (response, status, headers, config) {
    //响应成功处理方法
}).error(function (response) {
    //响应成功处理方法  
});


$http.post(url, data, [config]).success(function (response, status, headers, config) {
    //响应成功处理方法
}).error(function (response) {
    //响应失败处理方法
});