react - umi 项目约定式路由配置
https://blog.csdn.net/qq_26705343/article/details/120512027


配置式路由: 开发者需要单独创建一个配置文件, 通过各种属性或方法来实现对路由规则的配置
约定式路由: 开发者不需要手动配置, 只需要按照 umi 的规则来创建路由目录和文件,umi 会自动根据文件目录将路由配置解析出来
如果没有 routes 配置,Umi 会进入约定式路由模式,然后分析 src/pages目录拿到路由配置.

属性
exact:  一般而言,
        react路由会匹配所有匹配到的路由组件, exact能够使得路由的匹配更严格一些.
        exact的值为bool型,
        1. 为true是表示严格匹配,
        要求路径与location.pathname必须完全匹配, 且会比较匹配过的路由是否和正匹配的路由一致,
        2. 为false时为正常匹配.
        如在exact为true时, ’/link’与’/’是不匹配的, 但是在false的情况下它们又是匹配的.

strict(bool):
        true的时候, 有结尾斜线的路径只能匹配有斜线的location.pathname；



.
  └── pages
    ├── index.tsx
    └── users.tsx

[
  { exact: true, path: '/', component: '@/pages/index' }, //index没有后缀
  { exact: true, path: '/users', component: '@/pages/users' },
]

满足以下任意规则的文件不会被注册为路由
1. 以 . 或 _ 开头的文件或目录
2. 以 d.ts 结尾的类型定义文件
3. 以 test.ts, spec.ts, e2e.ts 结尾的测试文件
4. components 和 component 目录
5. utils 和 util 目录
6. 不是 .js, .jsx, .ts 或 .tsx 文件
7. 文件内容不包含 JSX 元素

1. 删除.umirc.js的路由配置
2. 在pages创建index.js 文件 会自动创建路由
此时.umi文件中routers显示
{
    path: '/',
    exact: true,
    component: require('../index.jsx').default,
    _title: 'web-app',
    _title_default: 'web-app',
  },

3.配置根文件转路由
import { Redirect } from 'umi';

function BasicLayout(props) {
  return (
    <div>
      <Redirect to={"/home"}></Redirect>
    </div>
  )
}
export default BasicLayout;

嵌套路由
4. 创建Home文件 如果想要创建嵌套路由 需要命名 _layout.jsx 为当前Home的默认文件
└── pages
    └── Home
        ├── _layout.js
        ├── HomeChildren   这个文件就是Home/HomeChildren 的地址
        └── ... 以此类推

会生成路由
[
  { exact: false, path: Homecomponent: '@/pages/Home/_layout',
    routes: [
      { exact: true, path: '/home', component: '@/pages/home/HomeChildren/index.jsx' },
      ...
    ]
  }
]


5. 创建好文件 默认生成路由之后 在你想要显示子组件的位置通过props来调用
import React from 'react';

const Home = function (props) {
  return
      <div>
        我是home文件
        {props.children}   //这就是子路由显示的视图
      </div>;
};

export default Home;
